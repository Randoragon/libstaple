.TH LIBSTAPLE 7 DATE "libstaple-VERSION"
.SH NAME
Staple \- a general-purpose data structure library in pure C.
.SH DESCRIPTION
.P
.B Staple
is a general-purpose library implementing common data structures for programming
purposes. The library should be as flexible as reasonably possible, while
remaining very intuitive to the user.
.P
Documentation is scattered in form of man pages, please refer to those when in
need, but generally speaking, for a person well versed in C, there should be no
big surprises.
.SS Supported Data Structures \fR(as of VERSION)\fP
.IP \(bu
stack
.sp -1
.IP \(bu
queue
.SS Generic Data vs. Primitive Types
.P
Every major function for inserting, removing, getting and setting elements is
available in 2 forms:
.IP \(bu
.B Generic Form
- for any data hidden behind a
.BR void* .
.sp -1
.IP \(bu
.B Suffixed Form
- for primitive types only.
.TP
.IR Examples :
.IP \(bu
.BR sp_stack_push (3)
\h'2n'- reads from a \fBvoid*\fP, generic
.sp -1
.IP \(bu
.BR sp_stack_pushi (3)
\h'1n'- pass-by-value \fBint\fP, suffixed
.sp -1
.IP \(bu
.BR sp_stack_pushus (3)
- pass-by-value \fBunsigned short\fP, suffixed
.P
This design ensures that it is possible to store any kind of data in any data
structure (using Generic Form functions), but for simple primitives there exist
separate functions that allow using pass-by-value, which is often more
convenient.
.P
Here is a full table of suffixes, although all you need to remember is to use
the first letters of your target type (except for strings):
.TS
box;
rb|lb
r |l
rb|lb.
SUFFIX	TYPE
_
none 	any (\fBvoid*\fP)
c\fR,\fP sc\fR,\fP uc 	char\fR,\fP signed char\fR,\fP unsigned char
s\fR,\fP us 	short\fR,\fP unsigned short
i\fR,\fP ui 	int\fR,\fP unsigned int
l\fR,\fP ul 	long\fR,\fP unsigned long
f\fR,\fP d\fR,\fP ld 	float\fR,\fP double\fR,\fP long double
str\fR,\fP strn	\fRstring (\fPchar*\fR), substring (\fPchar*\fR)\fP
.TE
.P
.B "signed char"
is the only explicitly signed type available due to the fact that
.B char
signedness is not defined by the standard.
.P
The
.B strn
"substring" prefix allows one to specify the number of bytes of the string to
read. It is only implemented for insert operations.
.P
If compiled with C99 support (the default),
.B Staple
provides the following suffixes on top of the aforementioned ones:
.TS
box;
rb|lb
rb|lb.
SUFFIX	TYPE
_
b	_Bool
ll\fR,\fP ull	long long\fR,\fP unsigned long long
i8\fR,\fP u8	int8_t\fR,\fP uint8_t
i16\fR,\fP u16	int16_t\fR,\fP uint16_t
i32\fR,\fP u32	int32_t\fR,\fP uint32_t
i64\fR,\fP u64	int64_t\fR,\fP uint64_t
.TE
.
.SS Thread Safety
.P
.B Staple
was not tested for thread safety and there have been no serious attempts at
ensuring correct execution in a multi-threaded environment.
.P
That said, the library does not rely on global variables, and all functions that
operate on structures are practically self-contained, so it could be sufficient
to simply lock a structure with a mutex before passing it to a function.
.SS Debug Mode
To enable debug mode, recompile the library with
.B STAPLE_DEBUG
defined (default: off).
.P
Debug mode enables additional error checking, which causes some functions to
return more error codes.
.P
When debug mode is disabled, only the vital errors are checked, such as memory
allocations and integer overflows. To find out which errors are checked with and
without debug mode for a particular function, refer to its man page.
.P
Debug mode state can be determined during runtime with the
.BR sp_is_debug (3)
function.
.SS Quiet Mode
To enable quiet mode, recompile the library with
.B STAPLE_QUIET
defined (default: off).
.P
Quiet mode suppresses all debug output. By default, all functions aside from
returning error codes also print short error messages and warnings.
.P
Quiet mode state can be determined during runtime with the
.BR sp_is_quiet (3)
function.
.SS Abort Mode
To enable abort mode, recompile the library with
.B STAPLE_ABORT
defined (default: off).
.P
When abort mode is enabled, every caught warning and error will call
.BR exit (1)
after having printed the error message (unless
.B STAPLE_QUIET
was defined).
This functionality is useful for writing simple programs that shouldn't need to
bother with error checking.
.P
Abort mode state can be determined during runtime with the
.BR sp_is_abort (3)
function.
.SH CONFORMING TO
.B Staple
is compatible with any C standard starting from "ANSI" C89. This is to ensure
maximum portability and compatibility with platforms which may not have newer C
compilers.
.P
Depending on which standard of C
.B Staple
is compiled in, some features may be present or missing. The following is a
table of every feature that depends on a specific C standard:
.
.TS
box;
cb|cb
c |c
cb|cb.
STANDARD	FEATURE
_
C99 or later	C99 type suffixes (see \fBDESCRIPTION\fP for the full table)
.TE
.SH NOTES
.P
In the future, the following additions are planned for the library (order is
arbitrary):
.IP
deque, bitarray, hashmap, linked list, 2D Matrix, 3D Matrix, priority queue, avl
tree, rbtree
.SH BUGS
.P
Please report bugs to the author of the library, either by email or by opening
an issue on GitHub.
.SH AUTHORS
.P
.ad l
.B Staple
was written by
.MT randoragongamedev@gmail.com
Randoragon
.ME .
.br
The source code is available on
.UR https://github.com/randoragon/libstaple
GitHub
.UE .
.ad
.SH SEE ALSO
.ad l
.BR sp_stack (7) ,
.BR sp_queue (7) ,
.BR sp_is_debug (3) ,
.BR sp_is_quiet (3) ,
.BR sp_is_abort (3)
