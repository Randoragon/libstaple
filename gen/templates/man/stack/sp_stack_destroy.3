.\"M stack
.TH SP_STACK_DESTROY 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_destroy \- destroy a stack
.\". MAN_SYNOPSIS_BEGIN
int sp_stack_destroy(struct sp_stack
.RI * stack ,
int
.RI (* dtor )(void*))
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
The
.BR sp_stack_destroy ()
function
frees all memory comprising a stack. Accessing the memory after destruction is
undefined behavior, but the same
.I stack
variable can be safely reused to create a new stack.
.P
The
.BR sp_stack_destroy ()
function shall first call
.BR sp_stack_clear ()
to free all memory attributed to the contents of
.IR stack ,
and finally the memory of the container itself is freed.
.P
.I stack
is a pointer to the stack that shall be freed.
.P
.I dtor
is transparently passed to the
.BR sp_stack_clear ()
function. See
.BR sp_stack_clear (3).
.SH RETURN VALUE
.\". MAN_RETVAL_0_OR_CODE sp_stack_destroy
.SH ERRORS
.\". MAN_SHALL_FAIL_IF sp_stack_destroy
.\". MAN_ERRCODE SP_EINVAL
.I stack
is a null pointer (debug mode only).
.\". MAN_ERRCODE SP_ECALLBK
.I dtor
returned non-0 for some stack element.
.\". MAN_CONFORMING_TO
.SH EXAMPLES
.\". MAN_EXAMPLE_DTOR_FOUND_IN sp_stack_clear 3
