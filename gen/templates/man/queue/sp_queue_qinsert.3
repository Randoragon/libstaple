.\"M queue
.TH SP_QUEUE_QINSERT 3 DATE "libstaple-VERSION"
.\"NAME str strn
\- quickly insert an element at any position of a queue
.\". MAN_SYNOPSIS_BEGIN
int
.BR sp_queue_qinsert "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const void
.RI * elem )
.\"SS{
.br
int
.BR sp_queue_qinsert$SUFFIX$ "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
$TYPE$
.IR elem )
.\"SS}
.br
int
.BR sp_queue_qinsertstr "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem )
.br
int
.BR sp_queue_qinsertstrn "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem ,
size_t
.IR len )
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
See
.BR sp_queue_insert (3).
.P
The functions in the
.BR sp_queue_qinsert ()
family operate in constant time, which is achievable by changing the order of
the elements upon insertion.
.\". MAN_CONFORMING_TO
.SH EXAMPLES
To explain how the
.BR sp_queue_insert ()
and
.BR sp_queue_qinsert ()
families differ, consider the following initial queue (from head to tail):
.IP
.B 1 2 3 4 _ _ _
.P
Now, let us investigate what happens when we try to insert the number
.B 5
at position
.IR 2 .
.P
The functions in the
.BR sp_queue_insert ()
family would move
.BR 3 " and " 4
backwards, and insert
.B 5
without altering the order:
.IP (1)
.B 1 2 _ 3 4 _ _
.br
\h'6n'^ ^
.IP (2)
.B 1 2 5 3 4 _ _
.br
\h'4n'^
.P
On the contrary, the functions in the
.BR sp_queue_qinsert ()
family achieve the goal faster by moving the element "in the way" (in this case
.BR 3 )
to the back of the queue:
.IP (1)
.B 1 2 _ 4 3 _ _
.br
\h'8n'^
.IP (2)
.B 1 2 5 4 3 _ _
.br
\h'4n'^
.P
The second approach guarantees constant time, but does not preserve the order of
the elements.
