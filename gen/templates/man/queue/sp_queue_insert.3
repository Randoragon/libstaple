.\"M queue
.TH SP_QUEUE_INSERT 3 DATE "libstaple-VERSION"
.\"NAME str strn
\- insert an element at any position of a queue
.\". MAN_SYNOPSIS_BEGIN
int
.BR sp_queue_insert "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const void
.RI * elem )
.\"SS{
.br
int
.BR sp_queue_insert$SUFFIX$ "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
$TYPE$
.IR elem )
.\"SS}
.br
int
.BR sp_queue_insertstr "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem )
.br
int
.BR sp_queue_insertstrn "(struct sp_queue"
.RI * queue ,
size_t
.IR idx ,
const char
.RI * elem ,
size_t
.IR len )
.\". MAN_SYNOPSIS_END
.SH DESCRIPTION
The functions in the
.BR sp_queue_insert ()
family are used to insert elements at any position of a queue. The order of
elements before and after the newly inserted element shall be preserved.
.P
.I queue
is the queue that shall be inserted into.
.P
.I idx
is the index at which the new element will be placed. Indices start from 0 and
extend to the rear \(em 0 is the front element, 1 is the element behind it, and
so on.
.br
Inserting at position \fBn\fP requires up to \fBsize / 2\fP elements to be moved
in memory. Inserting at \fBsize\fP has the same effect as
.BR sp_queue_push (3).
.br
.I idx
cannot be larger than
.IR queue "'s " size .
.P
.I elem
is the element to be inserted.
.SS Generic Form
.I elem
must be a void pointer to the first byte of the element that shall be inserted.
The number of bytes to copy is equal to
.IR queue "'s " elem_size
field.
.SS Suffixed Form
.I elem
is passed directly in the function argument.
.P
The
.BR sp_queue_insertstr ()
function creates a copy of the string pointed to by
.I elem
and stores the new pointer on the queue. The string must fit in
.I SIZE_MAX
bytes, including the null terminator.
.P
The
.BR sp_queue_insertstrn ()
function is equivalent to
.BR sp_queue_insertstr (),
except it shall always copy exactly
.I len
bytes and append a null terminator at the end.
.I len
must be smaller than
.IR SIZE_MAX .
.SH RETURN VALUE
.\". MAN_RETVAL_0_OR_CODE_FAMILY sp_queue_insert
.SH ERRORS
.\". MAN_SHALL_FAIL_IF_FAMILY sp_queue_insert
.\". MAN_ERRCODE SP_EINVAL
.I queue
is a null pointer (debug mode only).
.\". MAN_ERRCODE SP_EINDEX
.I idx
out of range (debug mode only).
.\". MAN_ERRCODE SP_ERANGE
Maximum buffer size exceeded. See BUGS in
.BR sp_queue (7).
.\". MAN_ERRCODE SP_ENOMEM
Memory allocation failed.
.SS Generic Form
The
.BR sp_queue_insert ()
function shall fail if:
.\". MAN_ERRCODE SP_EINVAL
.I elem
is a null pointer (debug mode only).
.SS Suffixed Form
.\". MAN_SHALL_FAIL_IF_SUFFIXED sp_queue_insert
.\". MAN_ERRCODE SP_EILLEGAL
.IR queue "'s " elem_size
does not match the size of the
.I elem
argument (debug mode only).
.P
The
.BR sp_stack_insertstr ()
and
.BR sp_stack_insertstrn ()
functions shall fail if:
.\". MAN_ERRCODE SP_EINVAL
.I elem
is a null pointer (debug mode only).
.\". MAN_ERRCODE SP_ERANGE
string too long or
.I len
too large.
.\". MAN_CONFORMING_TO
