.TH RND_QUEUE_CLEAR 3 DATE "librnd-VERSION"
.SH NAME
rnd_queue_clear \- remove all elements from a queue
.SH SYNOPSIS
.ad l
#include <rnd.h>
.sp
int
.BR rnd_queue_clear "(struct rnd_queue"
.RI * queue ,
int
.RI (* dtor )(void*))
.sp
Link with \fI-lrnd\fP.
.ad
.SH DESCRIPTION
The
.BR rnd_queue_clear ()
function removes every element from a queue. The queue does not have to contain
any elements, in which case nothing happens.
.P
.I queue
is a pointer to the queue that shall be cleared.
.P
.I dtor
is a pointer to a destructor function that shall be invoked on every element of
the queue.  This mechanism is useful if individual queue elements own memory
that should be freed (see EXAMPLES). If no such destructor function is needed,
.B NULL
can be passed to skip this functionality.
.P
The destructor function pointed to by
.I dtor
must return 0 for success, and anything else for failure. In debug mode, the
caught error code (if any) is printed on stderr.
.SH RETURN VALUE
If successful, the
.BR rnd_queue_clear ()
function shall return 0. Otherwise, it shall return a code indicating the error.
.SH ERRORS
The
.BR rnd_queue_clear ()
function shall fail if:
.IP \fBRND_EINVAL\fP 1.5i
.I queue
is a null pointer (debug mode only).
.IP \fBRND_EHANDLER\fP 1.5i
.I dtor
returned non-0 for some queue element.
.SH CONFORMING TO
See
.BR librnd (7).
.SH EXAMPLES
This is an example of how to use the
.I dtor
function:
.IP
.ad l
.nf
struct example {
	void *ptr;
};

int example_dtor(void *elem)
{
	free(((struct example*)elem)->ptr);
	return 0;
}

int main()
{
	struct rnd_queue *q;
	struct example data;
	q = rnd_queue_create(sizeof(struct example), 1);
	data.ptr = malloc(32);
	rnd_queue_push(q, &data);
	rnd_queue_destroy(q, &example_dtor);
	/* The above function call is equivalent to:
		rnd_queue_clear(q, &example_dtor);
		rnd_queue_destroy(q, NULL);
	*/
	return 0;
}
.fi
.ad
.SH SEE ALSO
.ad l
.BR librnd (7),
.BR rnd_queue (7),
.BR rnd_queue_create (3),
.BR rnd_queue_destroy (3),
.BR rnd_queue_copy (3),
.BR rnd_queue_foreach (3),
.BR rnd_queue_push (3),
.BR rnd_queue_insert (3),
.BR rnd_queue_qinsert (3),
.BR rnd_queue_peek (3),
.BR rnd_queue_pop (3),
.BR rnd_queue_remove (3),
.BR rnd_queue_qremove (3),
.BR rnd_queue_get (3),
.BR rnd_queue_set (3),
.BR rnd_queue_print (3)
