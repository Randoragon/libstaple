.TH RND_QUEUE_QINSERT 3 DATE "librnd-VERSION"
.SH NAME
rnd_queue_qinsert, rnd_queue_qinsertc, rnd_queue_qinserts,
rnd_queue_qinserti, rnd_queue_qinsertl, rnd_queue_qinsertsc,
rnd_queue_qinsertuc, rnd_queue_qinsertus, rnd_queue_qinsertui,
rnd_queue_qinsertul, rnd_queue_qinsertf, rnd_queue_qinsertd,
rnd_queue_qinsertld \- quickly insert an element at any position of a queue
.SH SYNOPSIS
.ad l
#include <rnd.h>
.sp
int
.BR rnd_queue_qinsert "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
const void
.RI * elem )
.br
int
.BR rnd_queue_qinsertc "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
char
.IR elem )
.br
int
.BR rnd_queue_qinserts "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
short
.IR elem )
.br
int
.BR rnd_queue_qinserti "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
int
.IR elem )
.br
int
.BR rnd_queue_qinsertl "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
long
.IR elem )
.br
int
.BR rnd_queue_qinsertsc "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
signed char
.IR elem )
.br
int
.BR rnd_queue_qinsertuc "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned char
.IR elem )
.br
int
.BR rnd_queue_qinsertus "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned short
.IR elem )
.br
int
.BR rnd_queue_qinsertui "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned int
.IR elem )
.br
int
.BR rnd_queue_qinsertul "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
unsigned long
.IR elem )
.br
int
.BR rnd_queue_qinsertf "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
float
.IR elem )
.br
int
.BR rnd_queue_qinsertd "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
double
.IR elem )
.br
int
.BR rnd_queue_qinsertld "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
long double
.IR elem )
.sp
Link with \fI-lrnd\fP.
.ad
.SH DESCRIPTION
See
.BR rnd_queue_insert (3).
.P
The functions in the
.BR rnd_queue_qinsert ()
family operate in constant time, which is achievable by changing the order of
the elements upon insertion.
.SH EXAMPLES
To explain how the
.BR rnd_queue_insert ()
and
.BR rnd_queue_qinsert ()
families differ, consider the following initial queue (from head to tail):
.IP
.B 1 2 3 4 _ _ _
.P
Now, let us investigate what happens when we try to insert the number
.B 5
at position
.IR 2 .
.P
The functions in the
.BR rnd_queue_insert ()
family would move
.BR 3 " and " 4
backwards, and insert
.B 5
without altering the order:
.IP (1)
.B 1 2 _ 3 4 _ _
.br
\h'6n'^ ^
.IP (2)
.B 1 2 5 3 4 _ _
.br
\h'4n'^
.P
On the contrary, the functions in the
.BR rnd_queue_qinsert ()
family achieve the goal faster by moving the element "in the way" (in this case
.BR 3 )
to the back of the queue:
.IP (1)
.B 1 2 _ 4 3 _ _
.br
\h'8n'^
.IP (2)
.B 1 2 5 4 3 _ _
.br
\h'4n'^
.P
The second approach guarantees constant time, but does not preserve the order of
the elements.
.SH SEE ALSO
.ad l
.BR librnd (7),
.BR rnd_queue (7),
.BR rnd_queue_create (3),
.BR rnd_queue_destroy (3),
.BR rnd_queue_clear (3),
.BR rnd_queue_copy (3),
.BR rnd_queue_foreach (3),
.BR rnd_queue_push (3),
.BR rnd_queue_insert (3),
.BR rnd_queue_peek (3),
.BR rnd_queue_pop (3),
.BR rnd_queue_remove (3),
.BR rnd_queue_qremove (3),
.BR rnd_queue_get (3),
.BR rnd_queue_set (3),
.BR rnd_queue_print (3)

