.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_QUEUE_POP 3 DATE "libstaple-VERSION"
.SH NAME
sp_queue_pop,
sp_queue_popc,
sp_queue_pops,
sp_queue_popi,
sp_queue_popl,
sp_queue_popsc,
sp_queue_popuc,
sp_queue_popus,
sp_queue_popui,
sp_queue_popul,
sp_queue_popf,
sp_queue_popd,
sp_queue_popld,
sp_queue_popu8,
sp_queue_popu16,
sp_queue_popu32,
sp_queue_popu64,
sp_queue_popi8,
sp_queue_popi16,
sp_queue_popi32,
sp_queue_popi64,
sp_queue_popstr
\- remove and retrieve the front element of a queue
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.BR sp_queue_pop "(struct sp_queue"
.RI * queue ,
void
.RI * output )
.br
char
.BR sp_queue_popc "(struct sp_queue"
.RI * queue )
.br
short
.BR sp_queue_pops "(struct sp_queue"
.RI * queue )
.br
int
.BR sp_queue_popi "(struct sp_queue"
.RI * queue )
.br
long
.BR sp_queue_popl "(struct sp_queue"
.RI * queue )
.br
signed char
.BR sp_queue_popsc "(struct sp_queue"
.RI * queue )
.br
unsigned char
.BR sp_queue_popuc "(struct sp_queue"
.RI * queue )
.br
unsigned short
.BR sp_queue_popus "(struct sp_queue"
.RI * queue )
.br
unsigned int
.BR sp_queue_popui "(struct sp_queue"
.RI * queue )
.br
unsigned long
.BR sp_queue_popul "(struct sp_queue"
.RI * queue )
.br
float
.BR sp_queue_popf "(struct sp_queue"
.RI * queue )
.br
double
.BR sp_queue_popd "(struct sp_queue"
.RI * queue )
.br
long double
.BR sp_queue_popld "(struct sp_queue"
.RI * queue )
.br
uint8_t
.BR sp_queue_popu8 "(struct sp_queue"
.RI * queue )
.br
uint16_t
.BR sp_queue_popu16 "(struct sp_queue"
.RI * queue )
.br
uint32_t
.BR sp_queue_popu32 "(struct sp_queue"
.RI * queue )
.br
uint64_t
.BR sp_queue_popu64 "(struct sp_queue"
.RI * queue )
.br
int8_t
.BR sp_queue_popi8 "(struct sp_queue"
.RI * queue )
.br
int16_t
.BR sp_queue_popi16 "(struct sp_queue"
.RI * queue )
.br
int32_t
.BR sp_queue_popi32 "(struct sp_queue"
.RI * queue )
.br
int64_t
.BR sp_queue_popi64 "(struct sp_queue"
.RI * queue )
.br
char
.RB * sp_queue_popstr "(struct sp_queue"
.RI * queue )
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR sp_queue_pop ()
family are used to remove the front element of a queue and retrieve its value.
.br
Attempting to pop an element from an empty queue yields undefined behavior,
except in debug mode (See
.BR ERRORS ).
.P
.I queue
is the queue.
.SS Generic Form
.I output
is the start of an adequately-sized block of memory the popped element shall be
copied into.
.I output
must not overlap in memory with the popped element.
.B NULL
can be passed to skip this functionality.
.SS Suffixed Form
.P
The
.BR sp_queue_popstr ()
function returns a pointer to the memory block containing the popped string.
The user must manually
.BR free (3)
the block, otherwise the memory will leak!
.SH RETURN VALUE
.SS Generic Form
If successful, the
.BR sp_queue_pop ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SS Suffixed Form
The suffixed
.BR sp_queue_pop ()
functions shall return the value of the popped element.
.SH ERRORS
.SS Generic Form
The
.BR sp_queue_pop ()
function shall fail if:
.IP \fBSP_EINVAL\fP 1.5i
.IR queue
is a null pointer (debug mode only).
.IP \fBSP_EILLEGAL\fP 1.5i
.I queue
is empty (debug mode only).
.SS Suffixed Form
The suffixed
.BR sp_queue_pop ()
functions shall fail if:
.IP \fB0\fP 1.5i
.I queue
is a null pointer (debug mode only).
.IP \fB0\fP 1.5i
.I queue
is empty (debug mode only).
.IP \fB0\fP 1.5i
.IR queue->elem_size
does not match the size of the function's return type (debug mode only).
.P
(the
.BR sp_queue_popstr ()
function returns
.B NULL
instead of 0)
.SH NOTES
In debug mode, functions of the suffixed form (except
.BR sp_queue_popstr ())
do not provide an unambiguous error-detecting interface with return codes.
Returning 0 should be considered more so a fallback mechanism, since it doesn't
imply that an error has occurred.
.P
This means there is a guaranteed runtime uncertainty whenever one of these
functions in debug mode returns 0. However, the functions shall still print
error messages when appropriate, so failures can be told apart from successes by
the presence or absence of those (quiet mode needs to be disabled).
.P
At first, this ambiguity might seem strange and unacceptable. However, it is
justified in two ways:
.IP (1)
It is very convenient to have these functions return the value of the element
directly.
.sp -1
.IP (2)
The only errors that can occur are such resulting from library misuse by the
end-user, and not caused by uncontrollable factors such as insufficient memory,
etc. Program logic itself should guarantee safety from these errors.
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_queue (7),
.BR sp_queue_create (3),
.BR sp_queue_destroy (3),
.BR sp_queue_clear (3),
.BR sp_queue_push (3),
.BR sp_queue_peek (3),
.BR sp_queue_insert (3),
.BR sp_queue_remove (3),
.BR sp_queue_qinsert (3),
.BR sp_queue_qremove (3),
.BR sp_queue_get (3),
.BR sp_queue_set (3),
.BR sp_queue_eq (3),
.BR sp_queue_copy (3),
.BR sp_queue_foreach (3),
.BR sp_queue_print (3),
.BR free (3)
