.TH RND_QUEUE_REMOVE 3 DATE "librnd-VERSION"
.SH NAME
rnd_queue_remove - remove an element from any position of a queue
.SH SYNOPSIS
.ad l
#include <rnd.h>
.sp
int
.BR rnd_queue_remove "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx ,
void
.RI * output )
.br
char
.BR rnd_queue_removec "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
short
.BR rnd_queue_removes "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
int
.BR rnd_queue_removei "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
long
.BR rnd_queue_removel "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
signed char
.BR rnd_queue_removesc "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned char
.BR rnd_queue_removeuc "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned short
.BR rnd_queue_removeus "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned int
.BR rnd_queue_removeui "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
unsigned long
.BR rnd_queue_removeul "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
float
.BR rnd_queue_removef "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
double
.BR rnd_queue_removed "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.br
long double
.BR rnd_queue_removeld "(struct rnd_queue"
.RI * queue ,
size_t
.IR idx )
.sp
Link with \fI-lrnd\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR rnd_queue_remove ()
family are used to remove elements from any position of a queue. The order of
remaining elements shall be preserved.
.P
.I queue
is the queue that shall be removed from.
.P
.I idx
is the index of the element that shall be removed. Indices start from 0 and
extend to the rear \(em 0 is the front element, 1 is the element behind it, and
so on.
.br
Removing position \fBn\fP requires up to \fIsize \fB/ 2\fR elements to be moved in
memory. Removing the element at position \fIsize \fB- 1\fR has the same effect as
.BR rnd_queue_pop (3).
.br
.I idx
must be smaller than
.IR queue "'s " size .
.SS Generic Form
.I output
is the start of an adequately-sized block of memory the removed element shall be
copied into.
.I output
must not overlap in memory with the removed element.
.B NULL
can be passed to skip this functionality.
.SH RETURN VALUE
.SS Generic Form
If successful, the
.BR rnd_queue_remove ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SS Suffixed Form
If successful, the suffixed
.BR rnd_queue_remove ()
functions shall return the value of the removed element. Otherwise, they shall
return 0.
.SH ERRORS
.SS Generic Form
The
.BR rnd_queue_remove ()
function shall fail if:
.IP \fBRND_EINVAL\fP 1.5i
Either
.IR queue " or " output
are null pointers (debug mode only).
.IP \fBRND_EINDEX\fP 1.5i
.I idx
out of range (debug mode only).
.SS Suffixed Form
The suffixed
.BR rnd_queue_remove ()
functions shall fail if:
.IP 0 1.5i
.I queue
is a null pointer (debug mode only).
.IP 0 1.5i
.I idx
out of range (debug mode only).
.IP 0 1.5i
.IR queue "'s " elem_size
does not match the size of the function's return type (debug mode only).
.P
Note that 0 can also be a successful return value, since it is a number that can
be stored on the queue, like any other.
.SH NOTES
For practical reasons, functions of the suffixed form do not provide an
unambiguous error-detecting interface. This design choice was made because these
functions can only fail if the user misuses the library.
.P
This means there is a guaranteed uncertainty whenever a suffixed function
returns 0. However, failures can be told apart from successes depending on the
presence or absence of an error message (quiet mode needs to be disabled).
.SH CONFORMING TO
See
.BR librnd (7).
.SH SEE ALSO
.ad l
.BR librnd (7),
.BR rnd_queue (7),
.BR rnd_queue_create (3),
.BR rnd_queue_destroy (3),
.BR rnd_queue_clear (3),
.BR rnd_queue_copy (3),
.BR rnd_queue_map (3),
.BR rnd_queue_push (3),
.BR rnd_queue_insert (3),
.BR rnd_queue_quickinsert (3),
.BR rnd_queue_peek (3),
.BR rnd_queue_pop (3),
.BR rnd_queue_quickremove (3),
.BR rnd_queue_get (3),
.BR rnd_queue_set (3),
.BR rnd_queue_print (3)
