.TH RND_STACK_GET 3 DATE "librnd-VERSION"
.SH NAME
rnd_stack_get - look up arbitrary element in a stack
.SH SYNOPSIS
.ad l
#include <rnd.h>
.sp
int
.BR rnd_stack_get "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx ,
void
.RI * output )
.br
char
.BR rnd_stack_getc "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
short
.BR rnd_stack_gets "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
int
.BR rnd_stack_geti "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
long
.BR rnd_stack_getl "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
signed char
.BR rnd_stack_getsc "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
unsigned char
.BR rnd_stack_getuc "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
unsigned short
.BR rnd_stack_getus "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
unsigned int
.BR rnd_stack_getui "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
unsigned long
.BR rnd_stack_getul "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
float
.BR rnd_stack_getf "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
double
.BR rnd_stack_getd "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.br
long double
.BR rnd_stack_getld "(const struct rnd_stack"
.RI * stack ,
size_t
.IR idx )
.sp
Link with \fI-lrnd\fP.
.ad
.SH DESCRIPTION
.P
The functions in the
.BR rnd_stack_get ()
family are used to look up the value of an arbitrary element in a stack. The
looked up element remains on the stack.
.P
.I stack
is the stack.
.P
.I idx
is the index of the element to look up. Indices start from 0 and extend
downwards \(em 0 is the top element, 1 is the element below it, and so on.
.br
.I idx
must be smaller than
.IR stack "'s " size .
.SS Generic Form
.I output
is the start of an adequately-sized block of memory the element shall be copied
into.
.I output
must not overlap in memory with the element.
.SH RETURN VALUE
.SS Generic Form
If successful, the
.BR rnd_stack_get ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SS Suffixed Form
If successful, the suffixed
.BR rnd_stack_get ()
functions shall return the value of the element at \fIidx\fP. Otherwise, they shall
return 0.
.SH ERRORS
.SS Generic Form
The
.BR rnd_stack_get ()
function shall fail if:
.IP \fBRND_EINVAL\fP 1.5i
Either
.IR stack " or " output
are null pointers (debug mode only).
.IP \fBRND_EINDEX\fP 1.5i
.I idx
out of range (debug mode only).
.SS Suffixed Form
The suffixed
.BR rnd_stack_get ()
functions shall fail if:
.IP 0 1.5i
.I stack
is a null pointer (debug mode only).
.IP 0 1.5i
.I idx
out of range (debug mode only).
.IP 0 1.5i
.IR stack "'s " elem_size
does not match the size of the function's return type (debug mode only).
.P
Note that 0 can also be a successful return value, since it is a number that can
be stored on the stack, like any other.
.SH NOTES
For practical reasons, functions of the suffixed form do not provide an
unambiguous error-detecting interface. This design choice was made because these
functions can only fail if the user misuses the library.
.P
This means there is a guaranteed uncertainty whenever a suffixed function
returns 0. However, failures can be told apart from successes depending on the
presence or absence of an error message (quiet mode needs to be disabled).
.SH CONFORMING TO
See
.BR librnd (7).
.SH SEE ALSO
.ad l
.BR librnd (7),
.BR rnd_stack (7),
.BR rnd_stack_create (3),
.BR rnd_stack_destroy (3),
.BR rnd_stack_clear (3),
.BR rnd_stack_copy (3),
.BR rnd_stack_map (3),
.BR rnd_stack_push (3),
.BR rnd_stack_insert (3),
.BR rnd_stack_quickinsert (3),
.BR rnd_stack_peek (3),
.BR rnd_stack_pop (3),
.BR rnd_stack_remove (3),
.BR rnd_stack_quickremove (3),
.BR rnd_stack_set (3),
.BR rnd_stack_print (3)

