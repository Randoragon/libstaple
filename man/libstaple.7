.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\" 
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\" 
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\" 
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH LIBSTAPLE 7 DATE "libstaple-VERSION"
.SH NAME
Staple \- a general-purpose data structure library in pure C89.
.SH DESCRIPTION
.P
.B Staple
is a general-purpose library implementing common data structures for programming
purposes. The library should be as flexible as reasonably possible, while
remaining very intuitive to the user.
.P
Documentation is scattered in form of man pages, please refer to those when in
need, but generally speaking, for a person well versed in C, there should be no
big surprises.
.SS Supported Data Structures \fR(as of VERSION)\fP
.IP \(bu
stack
.sp -1
.IP \(bu
queue
.SS Generic Data vs. Primitive Types
.P
Every major function for inserting, removing, getting and setting elements is
available in 2 forms:
.IP \(bu
.B Generic Form
- for any data hidden behind a
.BR void* .
.sp -1
.IP \(bu
.B Suffixed Form
- for primitive types only.
.TP
.IR Examples :
.IP \(bu
.BR sp_stack_push (3)
\h'2n'- reads from a \fBvoid*\fP, generic
.sp -1
.IP \(bu
.BR sp_stack_pushi (3)
\h'1n'- pass-by-value \fBint\fP, suffixed
.sp -1
.IP \(bu
.BR sp_stack_pushus (3)
- pass-by-value \fBunsigned short\fP, suffixed
.P
This design ensures that it is possible to store any kind of data in any data
structure (using Generic Form functions), but for simple primitives there exist
separate functions that allow using pass-by-value, which is often more
convenient.
.P
Here is a full table of suffixes, although all you need to remember is to use
the first letters of your target type (except for strings):
.TS
box;
rb|lb
r |l
rb|lb.
SUFFIX	TYPE
_
none 	any (\fBvoid*\fP)
l 	long
ul 	unsigned long
i 	int
ui 	unsigned int
s 	short
us 	unsigned short
c 	char
sc 	signed char
uc 	unsigned char
f 	float
d 	double
ld 	long double
str	\fRstring (\fPchar*\fR)\fP
strn	\fRsubstring (\fPchar*\fR)\fP
.TE
.P
.B "signed char"
is the only explicitly signed type available due to the fact that
.B char
signedness is not defined by the standard.
.SS Thread Safety
.P
.B Staple
was not tested for thread safety and there have been no serious attempts at
ensuring correct execution in a multi-threaded environment.
.P
That said, the library does not rely on global variables, and all functions that
operate on structures are practically self-contained, so it could be sufficient
to simply lock a structure with a mutex before passing it to a function.
.SS Debug Mode
To enable debug mode, recompile the library with
.B STAPLE_DEBUG
defined (default: off).
.P
Debug mode enables additional error checking, which causes some functions to
return more error codes.
.P
When debug mode is disabled, only the vital errors are checked, such as memory
allocations and integer overflows. To find out which errors are checked with and
without debug mode for a particular function, refer to its man page.
.P
Debug mode state can be determined during runtime with the
.BR sp_is_debug (3)
function.
.SS Quiet Mode
To enable quiet mode, recompile the library with
.B STAPLE_QUIET
defined (default: off).
.P
Quiet mode suppresses all debug output. By default, all functions aside from
returning error codes also print short error messages and warnings.
.P
Quiet mode state can be determined during runtime with the
.BR sp_is_quiet (3)
function.
.SS Abort Mode
To enable abort mode, recompile the library with
.B STAPLE_ABORT
defined (default: off).
.P
When abort mode is enabled, every caught warning and error will call
.BR exit (1)
after having printed the error message (unless
.B STAPLE_QUIET
was defined).
This functionality is useful for writing simple programs that shouldn't need to
bother with error checking.
.P
Abort mode state can be determined during runtime with the
.BR sp_is_abort (3)
function.
.SH CONFORMING TO
The entirety of
.B Staple
is written in pure
.BR C89
for maximum portability. There are no external dependencies besides the C
Standard
Library.
.SH NOTES
.P
In the future, the following additions are planned for the library (order is
arbitrary):
.IP
deque, bitarray, hashmap, linked list, 2D Matrix, 3D Matrix, priority queue, avl
tree, rbtree
.SH BUGS
.P
Please report bugs to the author of the library, either by email or by opening
an issue on GitHub.
.SH AUTHORS
.P
.ad l
.B Staple
was written by
.MT randoragongamedev@gmail.com
Randoragon
.ME .
.br
The source code is available on
.UR https://github.com/randoragon/libstaple
GitHub
.UE .
.ad
.SH SEE ALSO
.ad l
.BR sp_stack (7) ,
.BR sp_queue (7) ,
.BR sp_is_debug (3) ,
.BR sp_is_quiet (3) ,
.BR sp_is_abort (3)
