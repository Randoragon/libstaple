.\"  Staple - A general-purpose data structure library in pure C89.
.\"  Copyright (C) 2021  Randoragon
.\"
.\"  This library is free software; you can redistribute it and/or
.\"  modify it under the terms of the GNU Lesser General Public
.\"  License as published by the Free Software Foundation;
.\"  version 2.1 of the License.
.\"
.\"  This library is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\"  Lesser General Public License for more details.
.\"
.\"  You should have received a copy of the GNU Lesser General Public
.\"  License along with this library; if not, write to the Free Software
.\"  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
.\"--------------------------------------------------------------------------------
.TH SP_STACK_EQ 3 DATE "libstaple-VERSION"
.SH NAME
sp_stack_eq \- check if two stacks are equal
.SH SYNOPSIS
.ad l
#include <staple.h>
.sp
int
.RB * sp_stack_eq (const
struct sp_stack
.RI * stack1 ,
const struct sp_stack
.RI * stack2 ,
int
.RI (* cmp )(const
void*, const void*))
.sp
Link with \fI-lstaple\fP.
.ad
.SH DESCRIPTION
The
.BR sp_stack_eq ()
function intakes two stacks and compares their contents. The
stacks are considered equal if and only if all of the following
conditions are met:
.IP (1)
.IR stack1->elem_size " == " stack2->elem_size
.IP (2)
.IR stack1->size " == " stack2->size
.IP (3)
The stacks' contents are equivalent, i.e. they both comprise of equal elements
in the same order.
.P
.IR stack1 " and " stack2
are the stacks to compare. The order of these arguments does not matter.
.P
.I cmp
is a pointer to a comparator function that shall be invoked on
every pair of consecutive elements from
.IR stack1 " and " stack2
to decide whether they are equal or not. The function must be implemented in
such a way that the first argument is the address to
.IR stack1 's
nth element and the second argument is the address to
.IR stack2 's
nth element.
The function must return 0 if elements are equal and non-0 otherwise.
.P
.B NULL
may be passed as \fIcmp\fP instead, in which case elements are compared using
.BR memcmp (3).
.SH RETURN VALUE
The
.BR sp_stack_eq ()
function shall return \fB1\fP if the comparison was successful and
.IR stack1 " and " stack2
are equal. Otherwise, it shall return
.BR 0 .
.SH ERRORS
The
.BR sp_stack_eq ()
function shall fail if:
.IP \fB0\fP 1.5i
Either
.IR stack1 " or " stack2
is a null pointer (debug mode only).
.SH CONFORMING TO
See
.BR libstaple (7).
.SH SEE ALSO
.ad l
.BR libstaple (7),
.BR sp_stack (7),
.BR sp_stack_create (3),
.BR sp_stack_destroy (3),
.BR sp_stack_clear (3),
.BR sp_stack_push (3),
.BR sp_stack_peek (3),
.BR sp_stack_pop (3),
.BR sp_stack_insert (3),
.BR sp_stack_remove (3),
.BR sp_stack_qinsert (3),
.BR sp_stack_qremove (3),
.BR sp_stack_get (3),
.BR sp_stack_set (3),
.BR sp_stack_copy (3),
.BR sp_stack_foreach (3),
.BR sp_stack_print (3),
.BR memcmp (3)
