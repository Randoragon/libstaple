.TH RND_STACK_POP 3 DATE "librnd-VERSION"
.SH NAME
rnd_stack_pop - remove and retrieve the top element of a stack
.SH SYNOPSIS
.ad l
#include <rnd.h>
.sp
int
.BR rnd_stack_pop "(struct rnd_stack"
.RI * stack ,
void
.RI * output )
.br
char
.BR rnd_stack_popc "(struct rnd_stack"
.RI * stack )
.br
short
.BR rnd_stack_pops "(struct rnd_stack"
.RI * stack )
.br
int
.BR rnd_stack_popi "(struct rnd_stack"
.RI * stack )
.br
long
.BR rnd_stack_popl "(struct rnd_stack"
.RI * stack )
.br
signed char
.BR rnd_stack_popsc "(struct rnd_stack"
.RI * stack )
.br
unsigned char
.BR rnd_stack_popuc "(struct rnd_stack"
.RI * stack )
.br
unsigned short
.BR rnd_stack_popus "(struct rnd_stack"
.RI * stack )
.br
unsigned int
.BR rnd_stack_popui "(struct rnd_stack"
.RI * stack )
.br
unsigned long
.BR rnd_stack_popul "(struct rnd_stack"
.RI * stack )
.br
float
.BR rnd_stack_popf "(struct rnd_stack"
.RI * stack )
.br
double
.BR rnd_stack_popd "(struct rnd_stack"
.RI * stack )
.br
long double
.BR rnd_stack_popld "(struct rnd_stack"
.RI * stack )
.sp
Link with \fI-lrnd\fP.
.ad
.SH DESCRIPTION
The functions in the
.BR rnd_stack_pop ()
family are used to remove the top element of a stack and retrieve its value.
Attempting to pop an element from an empty stack yields undefined behavior.
.P
.I stack
is the stack.
.SS Generic Form
.I output
is the start of an adequately-sized block of memory the popped element shall be
copied into.
.I output
must not overlap in memory with the popped element.
.B NULL
can be passed to skip this functionality.
.SH RETURN VALUE
.SS Generic Form
If successful, the
.BR rnd_stack_pop ()
function shall return 0. Otherwise, it shall return a code indicating the
error.
.SS Suffixed Form
If successful, the suffixed
.BR rnd_stack_pop ()
functions shall return the value of the popped element. Otherwise, they shall
return 0.
.SH ERRORS
.SS Generic Form
The
.BR rnd_stack_pop ()
function shall fail if:
.IP \fBRND_EINVAL\fP 1.5i
.I stack
is a null pointer (debug mode only).
.IP \fBRND_EILLEGAL\fP 1.5i
.I stack
is empty (debug mode only).
.SS Suffixed Form
The suffixed
.BR rnd_stack_pop ()
functions shall fail if:
.IP 0 1.5i
.I stack
is a null pointer (debug mode only).
.IP 0 1.5i
.I stack
is empty (debug mode only).
.IP 0 1.5i
.IR stack "'s " elem_size
does not match the size of the function's return type (debug mode only).
.P
Note that 0 can also be a successful return value, since it is a number that can
be stored on the stack, like any other.
.SH NOTES
Functions of the suffixed form do not provide an unambiguous error-detecting
interface with return codes. This design choice was made for 2 reasons:
.IP (1)
It is very convenient to have these functions return the value of the element
directly.
.sp -1
.IP (2)
The only errors that can occur are such resulting from library misuse by the
end-user, and not caused by external factors such as insufficient memory, etc.
This makes these errors far less important to report.
.P
This means there is a guaranteed runtime uncertainty whenever a suffixed
function returns 0. However, the functions shall still print error messages when
appropriate, so failures can be told apart from successes by the presence or
absence of those (quiet mode needs to be disabled).
.SH CONFORMING TO
See
.BR librnd (7).
.SH SEE ALSO
.ad l
.BR librnd (7),
.BR rnd_stack (7),
.BR rnd_stack_create (3),
.BR rnd_stack_destroy (3),
.BR rnd_stack_clear (3),
.BR rnd_stack_copy (3),
.BR rnd_stack_map (3),
.BR rnd_stack_push (3),
.BR rnd_stack_insert (3),
.BR rnd_stack_quickinsert (3),
.BR rnd_stack_peek (3),
.BR rnd_stack_remove (3),
.BR rnd_stack_quickremove (3),
.BR rnd_stack_get (3),
.BR rnd_stack_set (3),
.BR rnd_stack_print (3)

